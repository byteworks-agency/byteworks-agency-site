---
import AdminBase from '../../../layouts/AdminBase.astro';
import { prisma } from '../../../lib/db';

const title = 'Quotes';
const page = Number(Astro.url.searchParams.get('page') || '1');
const status = (Astro.url.searchParams.get('status') || 'all');
const q = (Astro.url.searchParams.get('q') || '').trim();
const pageSize = 20;
const skip = (page - 1) * pageSize;
const formatId = (value: string | null, date: Date) => {
  const raw = value || '';
  if (raw.includes('-')) return raw.toUpperCase();
  const cleaned = raw.replace(/[^A-Za-z0-9]/g, '').slice(0, 6).toUpperCase() || 'XXXXXX';
  const y = date.getUTCFullYear();
  const m = String(date.getUTCMonth() + 1).padStart(2, '0');
  return `BW-${y}${m}-${cleaned}`;
};

const where: any = {};
if (status && status !== 'all') where.status = status as any;
if (q) {
  where.OR = [
    { originEnquiryId: { contains: q, mode: 'insensitive' as any } },
    { id: { contains: q, mode: 'insensitive' as any } },
    { billToName: { contains: q, mode: 'insensitive' as any } },
    { customerId: { contains: q, mode: 'insensitive' as any } },
  ];
}

const whereBase: any = {};
if (q) whereBase.OR = where.OR;
const QUOTE_STATUSES = ['draft','sent','accepted','declined','expired'] as const;
const formatDate = (value: Date | string) => {
  const date = typeof value === 'string' ? new Date(value) : value;
  const day = String(date.getUTCDate()).padStart(2, '0');
  const month = String(date.getUTCMonth() + 1).padStart(2, '0');
  const year = date.getUTCFullYear();
  return `${day}/${month}/${year}`;
};

const [rows, totalCount, counts] = await Promise.all([
  prisma.quote.findMany({
    orderBy: { updatedAt: 'desc' },
    skip,
    take: pageSize,
    where,
    select: { id: true, status: true, currency: true, total: true, updatedAt: true, billToName: true, customerId: true, originEnquiryId: true },
  }),
  prisma.quote.count({ where }),
  Promise.all(QUOTE_STATUSES.map((s) => prisma.quote.count({ where: { ...(whereBase as any), status: s as any } }))),
]);

const totalPages = Math.max(1, Math.ceil(totalCount / pageSize));
const base = new URLSearchParams();
if (status && status !== 'all') base.set('status', status);
if (q) base.set('q', q);
const prevQS = new URLSearchParams(base); prevQS.set('page', String(page-1));
const nextQS = new URLSearchParams(base); nextQS.set('page', String(page+1));
const prevHref = `/admin/quotes?${prevQS.toString()}`;
const nextHref = `/admin/quotes?${nextQS.toString()}`;
---

<AdminBase title={title} description="Admin Quotes" image="/og-image.png" lang="en">
  <section class="max-w-[1200px] mx-auto">
    <header class="mb-4">
      <div class="flex items-center justify-between">
        <h1 class="text-2xl font-bold">Quotes</h1>
        <nav class="text-sm text-gray-600 dark:text-gray-300">Page {page} / {totalPages}</nav>
      </div>
      <form method="get" class="mt-3 grid md:grid-cols-3 gap-3">
        <div>
          <label class="block text-xs mb-1">Status</label>
          <select name="status" class="border border-gray-200 dark:border-gray-700 px-2 py-1 rounded w-full bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value="all" selected={status==='all'}>all</option>
            <option value="draft" selected={status==='draft'}>draft</option>
            <option value="sent" selected={status==='sent'}>sent</option>
            <option value="accepted" selected={status==='accepted'}>accepted</option>
            <option value="declined" selected={status==='declined'}>declined</option>
            <option value="expired" selected={status==='expired'}>expired</option>
          </select>
        </div>
        <div class="md:col-span-2">
          <label class="block text-xs mb-1">Search</label>
          <input name="q" value={q} placeholder="Search by Ref, customer, bill to" class="border px-3 py-2 rounded w-full bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 border-gray-200 dark:border-gray-700" />
        </div>
        <div class="md:col-span-3 flex gap-2">
          <button class="bg-primary text-white px-3 py-2 rounded" type="submit">Apply</button>
          <a class="px-3 py-2 rounded border border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-200" href="/admin/quotes">Clear</a>
          <a class="px-3 py-2 rounded border border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-200" href={`/api/quotes/export.csv?${base.toString()}`} target="_blank">Export CSV</a>
        </div>
      </form>
      <div class="mt-2 flex flex-wrap gap-2 text-xs text-gray-700 dark:text-gray-300">
        <span class="px-2 py-1 border rounded">all: {totalCount}</span>
        {QUOTE_STATUSES.map((s, i) => (
          <span class={`px-2 py-1 border rounded ${status===s ? 'bg-gray-100 dark:bg-background-dark/40' : ''}`}>{s}: {counts[i]}</span>
        ))}
      </div>
    </header>
    <!-- Desktop table -->
    <div class="hidden lg:block overflow-x-auto border border-gray-200 dark:border-gray-700 rounded">
      <table class="w-full text-sm bg-white dark:bg-background-dark table-fixed">
        <thead>
          <tr class="bg-gray-50 dark:bg-gray-800/60 text-left text-gray-600 dark:text-gray-200">
            <th class="p-2 w-[44%]">Quote</th>
            <th class="p-2 w-[20%]">Status</th>
            <th class="p-2 w-[20%]">Total</th>
            <th class="p-2 w-[16%] hidden xl:table-cell">Updated</th>
            <th class="p-2 w-[8%] text-right">Actions</th>
          </tr>
        </thead>
        <tbody>
          {rows.map((q) => (
            <tr class="border-t border-gray-200 dark:border-gray-700">
              <td class="p-2 align-top">
                <p class="font-mono text-xs break-all text-gray-700 dark:text-gray-200">#{formatId(q.originEnquiryId || q.id, new Date(q.updatedAt))}</p>
                <p class="text-[11px] text-gray-600 dark:text-gray-300 truncate">{q.billToName || q.customerId}</p>
              </td>
              <td class="p-2 capitalize text-gray-700 dark:text-gray-200">{q.status}</td>
              <td class="p-2 whitespace-nowrap text-gray-700 dark:text-gray-200">{q.currency} {q.total.toString()}</td>
              <td class="p-2 hidden xl:table-cell whitespace-nowrap text-gray-600 dark:text-gray-300">{formatDate(q.updatedAt)}</td>
              <td class="p-2 text-right whitespace-nowrap">
                <a class="inline-flex items-center gap-1 px-3 py-1.5 rounded border border-gray-200 dark:border-gray-700 text-sm text-gray-700 dark:text-gray-200 hover:bg-slate-50 dark:hover:bg-background-dark/60" href={`/admin/quotes/${q.id}`}>
                  Open
                </a>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
    <!-- Mobile cards -->
    <div class="lg:hidden space-y-3">
      {rows.map((q) => (
        <article class="p-3 rounded border border-gray-200 dark:border-gray-700 bg-white dark:bg-background-dark">
          <div class="flex items-start justify-between gap-3">
            <div>
              <h3 class="font-semibold leading-tight text-gray-900 dark:text-gray-100">{q.billToName || q.customerId}</h3>
              <p class="text-xs text-gray-600 dark:text-gray-300 font-mono break-all">#{formatId(q.originEnquiryId || q.id, new Date(q.updatedAt))}</p>
            </div>
            <div class="text-right">
              <span class="px-2 py-0.5 rounded-full text-[11px] capitalize border border-gray-200 dark:border-gray-600 text-gray-700 dark:text-gray-200">{q.status}</span>
              <p class="mt-1 text-xs text-gray-700 dark:text-gray-300">{formatDate(q.updatedAt)}</p>
            </div>
          </div>
          <div class="mt-2 flex items-center justify-between">
            <span class="text-sm font-medium text-gray-900 dark:text-gray-100">{q.currency} {q.total.toString()}</span>
            <a class="inline-flex items-center gap-1 px-3 py-1.5 rounded border border-gray-200 dark:border-gray-700 text-sm text-gray-700 dark:text-gray-200 hover:bg-slate-50 dark:hover:bg-background-dark/60" href={`/admin/quotes/${q.id}`}>Open</a>
          </div>
        </article>
      ))}
    </div>
    <div class="flex items-center justify-between mt-4 text-sm">
      <a class={`px-3 py-1 rounded border ${page <= 1 ? 'pointer-events-none opacity-50' : ''}`} href={page <= 1 ? '#' : prevHref}>Prev</a>
      <span class="text-gray-600 dark:text-gray-300">{totalCount} total</span>
      <a class={`px-3 py-1 rounded border ${page >= totalPages ? 'pointer-events-none opacity-50' : ''}`} href={page >= totalPages ? '#' : nextHref}>Next</a>
    </div>
  </section>
</AdminBase>



