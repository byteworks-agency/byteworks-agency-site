---
import AdminBase from '../../../../layouts/AdminBase.astro';
import { prisma } from '../../../../lib/db';

const title = 'Invoices';
const page = Number(Astro.url.searchParams.get('page') || '1');
const status = (Astro.url.searchParams.get('status') || 'all');
const q = (Astro.url.searchParams.get('q') || '').trim();
const pageSize = 10;
const skip = (page - 1) * pageSize;

const where: any = {};
if (status && status !== 'all') where.status = status as any;
if (q) {
  where.OR = [
    { id: { contains: q, mode: 'insensitive' as any } },
    { number: { contains: q, mode: 'insensitive' as any } },
    { billToName: { contains: q, mode: 'insensitive' as any } },
  ];
}

const whereBase: any = {};
if (q) whereBase.OR = where.OR;
const INVOICE_STATUSES = ['draft','sent','partial','paid','overdue','void'] as const;

const [rows, totalCount, counts] = await Promise.all([
  prisma.invoice.findMany({
    orderBy: { updatedAt: 'desc' },
    skip,
    take: pageSize,
    where,
    select: { id: true, status: true, currency: true, total: true, balance: true, updatedAt: true, billToName: true, number: true },
  }),
  prisma.invoice.count({ where }),
  Promise.all(INVOICE_STATUSES.map((s) => prisma.invoice.count({ where: { ...(whereBase as any), status: s as any } }))),
]);

const totalPages = Math.max(1, Math.ceil(totalCount / pageSize));
const base = new URLSearchParams();
if (status && status !== 'all') base.set('status', status);
if (q) base.set('q', q);
const prevQS = new URLSearchParams(base); prevQS.set('page', String(page-1));
const nextQS = new URLSearchParams(base); nextQS.set('page', String(page+1));
const prevHref = `/admin/billing/invoices?${prevQS.toString()}`;
const nextHref = `/admin/billing/invoices?${nextQS.toString()}`;
---

<AdminBase title={title} description="Admin Invoices" image="/og-image.png" lang="en">
  <section class="max-w-[1200px] mx-auto">
    <header class="mb-4">
      <div class="flex items-center justify-between">
        <h1 class="text-2xl font-bold">Invoices</h1>
        <nav class="text-sm text-gray-600">Page {page} / {totalPages}</nav>
      </div>
      <form method="get" class="mt-3 grid md:grid-cols-3 gap-3">
        <div>
          <label class="block text-xs mb-1">Status</label>
          <select name="status" class="border px-2 py-1 rounded w-full">
            <option value="all" selected={status==='all'}>all</option>
            <option value="draft" selected={status==='draft'}>draft</option>
            <option value="sent" selected={status==='sent'}>sent</option>
            <option value="partial" selected={status==='partial'}>partial</option>
            <option value="paid" selected={status==='paid'}>paid</option>
            <option value="overdue" selected={status==='overdue'}>overdue</option>
            <option value="void" selected={status==='void'}>void</option>
          </select>
        </div>
        <div class="md:col-span-2">
          <label class="block text-xs mb-1">Search</label>
          <input name="q" value={q} placeholder="Search by ID/No., bill to" class="border px-3 py-2 rounded w-full" />
        </div>
        <div class="md:col-span-3 flex gap-2">
          <button class="bg-primary text-white px-3 py-2 rounded" type="submit">Apply</button>
          <a class="px-3 py-2 rounded border" href="/admin/billing/invoices">Clear</a>
          <a class="px-3 py-2 rounded border" href={`/api/billing/invoices/export.csv?${base.toString()}`} target="_blank">Export CSV</a>
        </div>
      </form>
      <div class="mt-2 flex flex-wrap gap-2 text-xs text-gray-700">
        <span class="px-2 py-1 border rounded">all: {totalCount}</span>
        {INVOICE_STATUSES.map((s, i) => (
          <span class={`px-2 py-1 border rounded ${status===s ? 'bg-gray-100 dark:bg-background-dark/40' : ''}`}>{s}: {counts[i]}</span>
        ))}
      </div>
    </header>
    <!-- Desktop table -->
    <div class="hidden lg:block overflow-x-auto border rounded">
      <table class="w-full text-sm bg-white dark:bg-background-dark table-fixed">
        <thead>
          <tr class="bg-gray-50 dark:bg-background-dark/40 text-left">
            <th class="p-2 w-[24%]">ID/No.</th>
            <th class="p-2 w-[26%]">Bill To</th>
            <th class="p-2 w-[14%]">Status</th>
            <th class="p-2 w-[14%]">Total</th>
            <th class="p-2 w-[14%]">Balance</th>
            <th class="p-2 w-[8%] hidden xl:table-cell">Updated</th>
            <th class="p-2 w-[4%]"></th>
          </tr>
        </thead>
        <tbody>
          {rows.map((inv) => (
            <tr class="border-t">
              <td class="p-2 font-mono text-xs break-all">{inv.number || inv.id}</td>
              <td class="p-2 truncate" title={inv.billToName || '-'}>{inv.billToName || '-'}</td>
              <td class="p-2 capitalize">{inv.status}</td>
              <td class="p-2 whitespace-nowrap">{inv.currency} {inv.total.toString()}</td>
              <td class="p-2 whitespace-nowrap">{inv.currency} {inv.balance.toString()}</td>
              <td class="p-2 hidden xl:table-cell whitespace-nowrap">{new Date(inv.updatedAt).toISOString()}</td>
              <td class="p-2 text-right whitespace-nowrap"><a class="text-primary underline" href={`/admin/billing/invoices/${inv.id}`}>Open</a></td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
    <!-- Mobile cards -->
    <div class="lg:hidden space-y-3">
      {rows.map((inv) => (
        <article class="p-3 rounded border bg-white dark:bg-background-dark">
          <div class="flex items-start justify-between gap-3">
            <div>
              <h3 class="font-semibold leading-tight">{inv.billToName || '-'}</h3>
              <p class="text-xs text-gray-600 font-mono break-all">{inv.number || inv.id}</p>
            </div>
            <div class="text-right">
              <span class="px-2 py-0.5 rounded-full text-[11px] capitalize border">{inv.status}</span>
              <p class="mt-1 text-xs text-gray-700">{(Date.prototype.toLocaleString ? new Date(inv.updatedAt).toLocaleString() : new Date(inv.updatedAt).toISOString())}</p>
            </div>
          </div>
          <div class="mt-2 grid grid-cols-2 gap-2 items-center">
            <span class="text-sm">Total: <strong>{inv.currency} {inv.total.toString()}</strong></span>
            <span class="text-sm text-right">Balance: <strong>{inv.currency} {inv.balance.toString()}</strong></span>
          </div>
          <div class="mt-2 flex justify-end">
            <a class="text-primary underline text-sm" href={`/admin/billing/invoices/${inv.id}`}>Open</a>
          </div>
        </article>
      ))}
    </div>
    <div class="flex items-center justify-between mt-4 text-sm">
      <a class={`px-3 py-1 rounded border ${page <= 1 ? 'pointer-events-none opacity-50' : ''}`} href={page <= 1 ? '#' : prevHref}>Prev</a>
      <span class="text-gray-600">{totalCount} total</span>
      <a class={`px-3 py-1 rounded border ${page >= totalPages ? 'pointer-events-none opacity-50' : ''}`} href={page >= totalPages ? '#' : nextHref}>Next</a>
    </div>
  </section>
</AdminBase>



