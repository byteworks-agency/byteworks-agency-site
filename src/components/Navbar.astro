---
const { lang = "en" } = Astro.props;
const isEN = lang === "en";

const links = isEN
  ? [
      { href: "/en/", label: "Home" },
      { href: "/en/about", label: "About" },
      { href: "/en/contact", label: "Contact" },
    ]
  : [
      { href: "/es/", label: "Inicio" },
      { href: "/es/about", label: "Sobre nosotros" },
      { href: "/es/contact", label: "Contacto" },
    ];
---

<header class="sticky top-0 z-50 border-b border-neutral-200/70 dark:border-neutral-800 backdrop-blur bg-white/80 dark:bg-neutral-950/80">
  <nav class="max-w-6xl mx-auto flex items-center justify-between h-16 px-4">
    <!-- Logo + marca -->
    <a href={isEN ? "/en/" : "/es/"} class="flex items-center gap-2 font-display text-lg font-bold">
      <img src="/logo-light.png" alt="ByteWorks Logo" class="h-7 w-auto dark:hidden" />
      <img src="/logo-dark.png" alt="ByteWorks Logo" class="h-7 w-auto hidden dark:inline" />
      <span>ByteWorks</span>
    </a>

    <!-- Desktop menu -->
    <div class="hidden sm:flex items-center gap-6 text-sm">
      {links.map((item) => (
        <a href={item.href} class="hover:text-brand transition-colors duration-200">
          {item.label}
        </a>
      ))}
    </div>

    <!-- Hamburger button (animated) -->
    <button
      id="menu-btn"
      class="sm:hidden grid place-items-center size-10 rounded-md border border-neutral-300 dark:border-neutral-700 hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
      aria-label={isEN ? "Open menu" : "Abrir menú"}
      aria-expanded="false"
      aria-controls="mobile-menu"
    >
      <span class="sr-only">{isEN ? "Toggle menu" : "Abrir/cerrar menú"}</span>
      <div class="hamburger relative w-6 h-4">
        <span class="line line-1 absolute inset-x-0 top-0 h-0.5 bg-current rounded transition-transform duration-200 ease-out"></span>
        <span class="line line-2 absolute inset-x-0 top-1/2 -translate-y-1/2 h-0.5 bg-current rounded transition-opacity duration-150"></span>
        <span class="line line-3 absolute inset-x-0 bottom-0 h-0.5 bg-current rounded transition-transform duration-200 ease-out"></span>
      </div>
    </button>
  </nav>

  <!-- Mobile menu (animated) -->
  <div
    id="mobile-menu"
    class="sm:hidden border-t border-neutral-200/70 dark:border-neutral-800 bg-white dark:bg-neutral-950 overflow-hidden
           max-h-0 opacity-0 translate-y-[-4px] transition-[max-height,opacity,transform] duration-200 ease-out"
  >
    <div class="flex flex-col items-start p-4 space-y-4">
      {links.map((item) => (
        <a href={item.href} class="w-full text-left hover:text-brand transition-colors duration-200">
          {item.label}
        </a>
      ))}
    </div>
  </div>
</header>

<style>
  /* Animación de la hamburguesa a “X” cuando el botón tiene la clase .open */
  #menu-btn.open .line-1 {
    transform: translateY(7px) rotate(45deg);
  }
  #menu-btn.open .line-2 {
    opacity: 0;
  }
  #menu-btn.open .line-3 {
    transform: translateY(-7px) rotate(-45deg);
  }
</style>

<script is:inline>
  const btn = document.getElementById("menu-btn");
  const menu = document.getElementById("mobile-menu");

  function openMenu() {
    btn?.classList.add("open");
    btn?.setAttribute("aria-expanded", "true");
    // animación del panel
    menu?.classList.remove("opacity-0");
    menu?.classList.remove("translate-y-[-4px]");
    menu?.classList.add("opacity-100");
    menu?.classList.add("translate-y-0");
    // altura auto-animada
    const inner = menu?.firstElementChild;
    if (menu && inner) {
      menu.style.maxHeight = inner.scrollHeight + "px";
    }
  }

  function closeMenu() {
    btn?.classList.remove("open");
    btn?.setAttribute("aria-expanded", "false");
    // animación del panel
    menu?.classList.remove("opacity-100");
    menu?.classList.remove("translate-y-0");
    menu?.classList.add("opacity-0");
    menu?.classList.add("translate-y-[-4px]");
    // colapsar altura
    if (menu) menu.style.maxHeight = "0px";
  }

  btn?.addEventListener("click", () => {
    const expanded = btn.getAttribute("aria-expanded") === "true";
    if (expanded) closeMenu(); else openMenu();
  });

  // Cerrar al navegar (mejor UX)
  menu?.addEventListener("click", (e) => {
    const target = e.target;
    if (target && target.tagName === "A") closeMenu();
  });

  // Recalcular altura si cambia el tamaño (seguridad)
  window.addEventListener("resize", () => {
    if (btn?.classList.contains("open") && menu) {
      const inner = menu.firstElementChild;
      if (inner) menu.style.maxHeight = inner.scrollHeight + "px";
    }
  });
</script>
